npm install express jsonwebtoken bcryptjs cors mongoose
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const cors = require('cors');
const mongoose = require('mongoose');
const app = express();

app.use(express.json());
app.use(cors());

// Connect to database
mongoose.connect('mongodb://localhost/cloudconsole');

// User schema
const User = mongoose.model('User', new mongoose.Schema({
  username: String,
  password: String
}));

// Register endpoint
app.post('/api/register', async (req, res) => {
  const hashed = await bcrypt.hash(req.body.password, 10);
  const user = new User({ username: req.body.username, password: hashed });
  await user.save();
  res.sendStatus(201);
});

// Login endpoint
app.post('/api/login', async (req, res) => {
  const user = await User.findOne({ username: req.body.username });
  if (user && await bcrypt.compare(req.body.password, user.password)) {
    const token = jwt.sign({ id: user._id }, 'SECRET_KEY');
    res.json({ token });
  } else {
    res.sendStatus(401);
  }
});

// Middleware for authentication
function auth(req, res, next) {
  const token = req.headers['authorization'];
  if (!token) return res.sendStatus(401);
  jwt.verify(token, 'SECRET_KEY', (err, decoded) => {
    if (err) return res.sendStatus(403);
    req.user = decoded;
    next();
  });
}

// Example: Get VM list (dummy data, replace with real integration)
app.get('/api/vms', auth, (req, res) => {
  res.json([
    { id: 1, name: 'VM1', status: 'running' },
    { id: 2, name: 'VM2', status: 'stopped' }
  ]);
});

// Add endpoints for storage, databases, logs, metrics...

app.listen(4000, () => console.log('API running on http://localhost:4000'));
npx create-react-app cloud-console
cd cloud-console
npm install axios
import React, { useState } from 'react';
import axios from 'axios';

function App() {
  const [token, setToken] = useState('');
  const [vms, setVms] = useState([]);

  const login = async () => {
    const res = await axios.post('http://localhost:4000/api/login', {
      username: 'admin',
      password: 'password'
    });
    setToken(res.data.token);
  };

  const fetchVMs = async () => {
    const res = await axios.get('http://localhost:4000/api/vms', {
      headers: { Authorization: token }
    });
    setVms(res.data);
  };

  return (
    <div>
      <button onClick={login}>Login</button>
      <button onClick={fetchVMs} disabled={!token}>Get VMs</button>
      <ul>
        {vms.map(vm => (
          <li key={vm.id}>{vm.name} - {vm.status}</li>
        ))}
      </ul>
    </div>
  );
}

export default App;
